/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.EligibleDiscount;
import com.project.service.ping_me.domain.contract.HttpError;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "Discount", description = "the Discount API")
public interface DiscountApi {

    default DiscountApiDelegate getDelegate() {
        return new DiscountApiDelegate() {};
    }

    /**
     * GET /discount/{rentalActivityId}/eligibility : Gets discount eligibility details for rentalActivity.
     * # Gets discount eligibility details for rentalActivity, takes rentalActivity/reservationid in parameter  ## Example:  &#x60;&#x60;&#x60; GET /v1/digital-checkout/115646542/eligibility?currency&#x3D;USD&amp;identifierType&#x3D;RENTAL_ACTIVITY &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param currency currency code (required)
     * @param identifierType Identifier type for rentalActivityid in path param values will be RENTAL_ACTIVITY/RESERVATION (required)
     * @return Returns DiscountEligibility response object (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;BOOKING_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "discountEligibility",
        summary = "Gets discount eligibility details for rentalActivity.",
        tags = { "discount" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns DiscountEligibility response object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EligibleDiscount.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `BOOKING_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/discount/{rentalActivityId}/eligibility",
        produces = { "application/json" }
    )
    default ResponseEntity<EligibleDiscount> discountEligibility(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @NotNull @Pattern(regexp = "^.{3}$") @Parameter(name = "currency", description = "currency code", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "currency", required = true) String currency,
        @NotNull @Parameter(name = "identifierType", description = "Identifier type for rentalActivityid in path param values will be RENTAL_ACTIVITY/RESERVATION", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "identifierType", required = true) String identifierType
    ) {
        return getDelegate().discountEligibility(rentalActivityId, currency, identifierType);
    }

}
