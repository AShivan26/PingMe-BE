/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.VehicleAttributeResponse;
import com.project.service.ping_me.domain.contract.VehicleListResponseV2;
import com.project.service.ping_me.domain.contract.VehicleSelectionResponse;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "VehicleSelection", description = "the VehicleSelection API")
public interface VehicleSelectionApi {

    default VehicleSelectionApiDelegate getDelegate() {
        return new VehicleSelectionApiDelegate() {};
    }

    /**
     * GET /{rentalActivityId}/{vehicleId}/attributes : Get vehicle-attribute for a given vehicle
     * Get vehicle-attribute  based on the vehicleId
     *
     * @param rentalActivityId RentalActivity Id for Vehicle Selection (required)
     * @param vehicleId VehicleId Id (required)
     * @return successful operation (status code 200)
     *         or \&quot;HTTP errors may have one of the following error codes:\\n - &#x60;INVALID_BOOKING_ID&#x60; - Invalid reservationId type\\n\&quot; (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or \&quot;HTTP errors may have one of the following error codes:\\n - &#x60;INTERNAL_SERVER_ERROR&#x60;\\n\&quot; (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getVehicleAttributes",
        summary = "Get vehicle-attribute for a given vehicle",
        tags = { "VehicleSelection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleAttributeResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "\"HTTP errors may have one of the following error codes:\\n - `INVALID_BOOKING_ID` - Invalid reservationId type\\n\""),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "\"HTTP errors may have one of the following error codes:\\n - `INTERNAL_SERVER_ERROR`\\n\""),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{rentalActivityId}/{vehicleId}/attributes",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleAttributeResponse> getVehicleAttributes(
        @Parameter(name = "rentalActivityId", description = "RentalActivity Id for Vehicle Selection", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "vehicleId", description = "VehicleId Id", required = true, in = ParameterIn.PATH) @PathVariable("vehicleId") String vehicleId
    ) {
        return getDelegate().getVehicleAttributes(rentalActivityId, vehicleId);
    }


    /**
     * GET /v2/{rentalActivityId}/vehicle/list : Get vehicle-list for vehicle selection
     * Get Vehicle list based on the type of the reservation-id for vehicle selection
     *
     * @param rentalActivityId RentalActivity Id for Vehicle Selection (required)
     * @param filter to be used  in case of exhaustive list need be passed. possible values, ALL (optional)
     * @param terminal terminal information (optional)
     * @param experiment Experiment Details Ex: feature_xpress_label:original   TODO- This field to be removed as map after the aggregation of reservation is done for experiment analysis. (optional)
     * @return successful operation (status code 200)
     *         or \&quot;HTTP errors may have one of the following error codes:\\n - &#x60;INVALID_BOOKING_ID&#x60; - Invalid reservationId type\\n\&quot; (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or \&quot;HTTP errors may have one of the following error codes:\\n - &#x60;INTERNAL_SERVER_ERROR&#x60;\\n\&quot; (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getVehicleList",
        summary = "Get vehicle-list for vehicle selection",
        tags = { "VehicleSelection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleListResponseV2.class))
            }),
            @ApiResponse(responseCode = "400", description = "\"HTTP errors may have one of the following error codes:\\n - `INVALID_BOOKING_ID` - Invalid reservationId type\\n\""),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "\"HTTP errors may have one of the following error codes:\\n - `INTERNAL_SERVER_ERROR`\\n\""),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v2/{rentalActivityId}/vehicle/list",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleListResponseV2> getVehicleList(
        @Parameter(name = "rentalActivityId", description = "RentalActivity Id for Vehicle Selection", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "filter", description = "to be used  in case of exhaustive list need be passed. possible values, ALL", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "terminal", description = "terminal information", in = ParameterIn.QUERY) @Valid @RequestParam(value = "terminal", required = false) String terminal,
        @Parameter(name = "experiment", description = "Experiment Details Ex: feature_xpress_label:original   TODO- This field to be removed as map after the aggregation of reservation is done for experiment analysis.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "experiment", required = false) String experiment
    ) {
        return getDelegate().getVehicleList(rentalActivityId, filter, terminal, experiment);
    }


    /**
     * GET /{rentalActivityId}/vehicle/list : Get vehicle-list for vehicle selection
     * Get Vehicle list based on the type of the reservation-id for vehicle selection
     *
     * @param rentalActivityId RentalActivity Id for Vehicle Selection (required)
     * @param currency currency code (required)
     * @param vehicleListStrategy vehicleListStrategy to use DS_MODEL|CONFIG (optional)
     * @param terminal terminal information (optional)
     * @param experiment Experiment Details Ex: feature_xpress_label:original (optional)
     * @return successful operation (status code 200)
     *         or \&quot;HTTP errors may have one of the following error codes:\\n - &#x60;INVALID_BOOKING_ID&#x60; - Invalid reservationId type\\n\&quot; (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or \&quot;HTTP errors may have one of the following error codes:\\n - &#x60;INTERNAL_SERVER_ERROR&#x60;\\n\&quot; (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getVehicles",
        summary = "Get vehicle-list for vehicle selection",
        tags = { "VehicleSelection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleSelectionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "\"HTTP errors may have one of the following error codes:\\n - `INVALID_BOOKING_ID` - Invalid reservationId type\\n\""),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "\"HTTP errors may have one of the following error codes:\\n - `INTERNAL_SERVER_ERROR`\\n\""),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{rentalActivityId}/vehicle/list",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleSelectionResponse> getVehicles(
        @Parameter(name = "rentalActivityId", description = "RentalActivity Id for Vehicle Selection", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @NotNull @Pattern(regexp = "^.{3}$") @Parameter(name = "currency", description = "currency code", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "currency", required = true) String currency,
        @Parameter(name = "vehicleListStrategy", description = "vehicleListStrategy to use DS_MODEL|CONFIG", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vehicleListStrategy", required = false) String vehicleListStrategy,
        @Parameter(name = "terminal", description = "terminal information", in = ParameterIn.QUERY) @Valid @RequestParam(value = "terminal", required = false) String terminal,
        @Parameter(name = "experiment", description = "Experiment Details Ex: feature_xpress_label:original", in = ParameterIn.QUERY) @Valid @RequestParam(value = "experiment", required = false) String experiment
    ) {
        return getDelegate().getVehicles(rentalActivityId, currency, vehicleListStrategy, terminal, experiment);
    }

}
