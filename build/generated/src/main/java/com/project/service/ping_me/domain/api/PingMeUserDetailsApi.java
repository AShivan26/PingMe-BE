/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.UserResponseObject;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "PingMeUserDetails", description = "the PingMeUserDetails API")
public interface PingMeUserDetailsApi {

    default PingMeUserDetailsApiDelegate getDelegate() {
        return new PingMeUserDetailsApiDelegate() {};
    }

    /**
     * GET /pingme/users : Gets all users present in the system.
     * ## Gets all users present in the system  ## Example:  &#x60;&#x60;&#x60; GET /v1/ping-me/115646542/users -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @return Returns entry response object (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - pingmeId is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;PAGE_NOT_FOUND&#x60; - The API was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;CONFLICT_ERROR&#x60; - The session is already in place for this identifier. (status code 409)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "allUserDetails",
        summary = "Gets all users present in the system.",
        tags = { "Ping-Me-User-Details" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns entry response object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - pingmeId is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `PAGE_NOT_FOUND` - The API was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `CONFLICT_ERROR` - The session is already in place for this identifier."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pingme/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserResponseObject>> allUserDetails(
        
    ) {
        return getDelegate().allUserDetails();
    }

}
