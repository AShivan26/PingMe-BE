/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.UpdateUserDetailsRequest;
import com.project.service.ping_me.domain.contract.UpdateUserDetailsResponse;
import com.project.service.ping_me.domain.contract.UserDetailsResponse;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "UserDetails", description = "the UserDetails API")
public interface UserDetailsApi {

    default UserDetailsApiDelegate getDelegate() {
        return new UserDetailsApiDelegate() {};
    }

    /**
     * GET /{rentalActivityId}/driver : Returns the driver data including details requested in query if present.
     * # Gets rental activity data including data queried in identifier.  ## Example:  &#x60;&#x60;&#x60; GET /v1/digital-checkout/115646542/driver?identifiers&#x3D;DEFAULT_PARAMS -H \&quot;Authorization: Bearer TOKEN\&quot; GET /v1/digital-checkout/115646542/driver?identifiers&#x3D;RESIDENTIAL_ADDRESS,ID_CARD_DETAILS -H \&quot;Authorization: Bearer TOKEN\&quot; GET /v1/digital-checkout/115646542/driver?identifiers&#x3D;TAX_ID -H \&quot;Authorization: Bearer TOKEN\&quot;         &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param identifiers identifier to identify which field is to be updated (required)
     * @return Returns boolean flags for each fields and details of user if its already there in rental-activity. (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_BOOKING_ID&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "userDetails",
        summary = "Returns the driver data including details requested in query if present.",
        tags = { "UserDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns boolean flags for each fields and details of user if its already there in rental-activity.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDetailsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `INVALID_BOOKING_ID` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{rentalActivityId}/driver",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDetailsResponse> userDetails(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @NotNull @Parameter(name = "identifiers", description = "identifier to identify which field is to be updated", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "identifiers", required = true) List<String> identifiers
    ) {
        return getDelegate().userDetails(rentalActivityId, identifiers);
    }


    /**
     * PUT /{rentalActivityId}/driver/update : Endpoint for final update of User details.
     * # Endpoint for final update of user details.  ## Example:  &#x60;&#x60;&#x60; PUT /v1/digital-checkout/115646542/driver/update -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param updateUserDetailsRequest  (required)
     * @return Returns an object with boolean flag on success/failure. (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "userDetailsUpdate",
        summary = "Endpoint for final update of User details.",
        tags = { "UserDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns an object with boolean flag on success/failure.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateUserDetailsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/{rentalActivityId}/driver/update",
        produces = { "application/json" }
    )
    default ResponseEntity<UpdateUserDetailsResponse> userDetailsUpdate(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "UpdateUserDetailsRequest", description = "", required = true) @Valid @RequestBody UpdateUserDetailsRequest updateUserDetailsRequest
    ) {
        return getDelegate().userDetailsUpdate(rentalActivityId, updateUserDetailsRequest);
    }

}
