/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.PriceDetailResponse;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "Price", description = "the Price API")
public interface PriceApi {

    default PriceApiDelegate getDelegate() {
        return new PriceApiDelegate() {};
    }

    /**
     * GET /{rentalActivityId}/price/detail : Gets price information
     * # Gets price information ## Example: &#x60;&#x60;&#x60; GET /v1/digital-checkout/115646542/price/detail -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @return Returns price breakup information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or {\&quot;errorCode\&quot;: \&quot;VEHICLE_NOT_AVAILABLE\&quot;, \&quot;title\&quot;: \&quot;Vehicle not available\&quot;, \&quot;message\&quot;: \&quot;Vehicle you selected is no longer available, please select new vehicle.\&quot;, \&quot;retriable\&quot;: false} (status code 402)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getPriceDetail",
        summary = "Gets price information",
        tags = { "Price" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns price breakup information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "402", description = "{\"errorCode\": \"VEHICLE_NOT_AVAILABLE\", \"title\": \"Vehicle not available\", \"message\": \"Vehicle you selected is no longer available, please select new vehicle.\", \"retriable\": false}"),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{rentalActivityId}/price/detail",
        produces = { "application/json" }
    )
    default ResponseEntity<PriceDetailResponse> getPriceDetail(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId
    ) {
        return getDelegate().getPriceDetail(rentalActivityId);
    }

}
