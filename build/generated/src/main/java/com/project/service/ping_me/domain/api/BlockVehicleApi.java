/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.BlockVehicleRequest;
import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.VehicleBlockDateTime;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "BlockVehicle", description = "the BlockVehicle API")
public interface BlockVehicleApi {

    default BlockVehicleApiDelegate getDelegate() {
        return new BlockVehicleApiDelegate() {};
    }

    /**
     * PUT /{rentalActivityId}/vehicle/block : Blocks the given vehicle to the given reservation, adding an upsell charge if necessary.
     * # Block vehicle to rental activity  ## Example:  &#x60;&#x60;&#x60; PUT /v1/digital-checkout/115646542/vehicle/block -H \&quot;Authorization: Bearer TOKEN\&quot; { \&quot;vehicleId\&quot;: \&quot;1234\&quot;, \&quot;configurationId\&quot;: \&quot;5678-2342-2342-234234\&quot; } &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param blockVehicleRequest  (required)
     * @return datetime inside response present in case сustomer blocked vehicle via app, also if customer blocked same vehicle again (but just with less time). In case of blocking prebooked/guaranteed model - datetime and timezone are null (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_VEHICLE&#x60; - The vehicle id was missing or invalid. - &#x60;INVALID_PERSON&#x60; - PersonID is missing from token. - &#x60;INVALID_TIME_FOR_BLOCK_VEHICLE_REQUEST&#x60; - Vehicle cannot be blocked during this time period (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;VEHICLE_NOT_AVAILABLE&#x60; - Vehicle you selected is no longer available, please select new vehicle. - &#x60;CONFIGURATION_NOT_FOUND&#x60; - If the configuration is non-existent or has expired. - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors may have one of the following error codes: - &#x60;VEHICLE_ALREADY_BLOCKED&#x60; - The vehicle was already blocked to another reservation. - &#x60;RESERVATION_NOT_IN_TIMERANGE&#x60; - The reservation is not within the timerange for using block endpoint. - &#x60;VEHICLE_SELECTION_NOT_ALLOWED&#x60; - The reservation or branch does not support vehicle selection. (status code 501)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "blockVehicle",
        summary = "Blocks the given vehicle to the given reservation, adding an upsell charge if necessary.",
        tags = { "BlockVehicle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "datetime inside response present in case сustomer blocked vehicle via app, also if customer blocked same vehicle again (but just with less time). In case of blocking prebooked/guaranteed model - datetime and timezone are null", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleBlockDateTime.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_VEHICLE` - The vehicle id was missing or invalid. - `INVALID_PERSON` - PersonID is missing from token. - `INVALID_TIME_FOR_BLOCK_VEHICLE_REQUEST` - Vehicle cannot be blocked during this time period"),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `VEHICLE_NOT_AVAILABLE` - Vehicle you selected is no longer available, please select new vehicle. - `CONFIGURATION_NOT_FOUND` - If the configuration is non-existent or has expired. - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "501", description = "HTTP errors may have one of the following error codes: - `VEHICLE_ALREADY_BLOCKED` - The vehicle was already blocked to another reservation. - `RESERVATION_NOT_IN_TIMERANGE` - The reservation is not within the timerange for using block endpoint. - `VEHICLE_SELECTION_NOT_ALLOWED` - The reservation or branch does not support vehicle selection."),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/{rentalActivityId}/vehicle/block",
        produces = { "application/json" }
    )
    default ResponseEntity<VehicleBlockDateTime> blockVehicle(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "BlockVehicleRequest", description = "", required = true) @Valid @RequestBody BlockVehicleRequest blockVehicleRequest
    ) {
        return getDelegate().blockVehicle(rentalActivityId, blockVehicleRequest);
    }

}
