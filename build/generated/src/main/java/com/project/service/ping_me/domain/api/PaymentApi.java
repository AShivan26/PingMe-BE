/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.AuthorizePaymentRequest;
import com.project.service.ping_me.domain.contract.AuthorizePaymentResponse;
import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.PaymentCounterResponse;
import com.project.service.ping_me.domain.contract.PaymentRequest;
import com.project.service.ping_me.domain.contract.PaymentResponse;
import com.project.service.ping_me.domain.contract.PaymentResponseV2;
import com.project.service.ping_me.domain.contract.PaymentResponseV3;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "Payment", description = "the Payment API")
public interface PaymentApi {

    default PaymentApiDelegate getDelegate() {
        return new PaymentApiDelegate() {};
    }

    /**
     * GET /{rentalActivityId}/payment : Gets payment information
     * # Gets payment information  ## Example:  &#x60;&#x60;&#x60; GET /v1/digital-checkout/115646542/payment -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @return Returns payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or {\&quot;errorCode\&quot;: \&quot;VEHICLE_NOT_AVAILABLE\&quot;, \&quot;title\&quot;: \&quot;Vehicle not available\&quot;, \&quot;message\&quot;: \&quot;Vehicle you selected is no longer available, please select new vehicle.\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_FAILED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_REJECTED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey&#x3D;WEBAPP&amp;title&#x3D;Payment+error+communication+-+Prepaid (status code 402)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getPaymentInformation",
        summary = "Gets payment information",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "402", description = "{\"errorCode\": \"VEHICLE_NOT_AVAILABLE\", \"title\": \"Vehicle not available\", \"message\": \"Vehicle you selected is no longer available, please select new vehicle.\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_FAILED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_REJECTED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey=WEBAPP&title=Payment+error+communication+-+Prepaid"),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{rentalActivityId}/payment",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentResponse> getPaymentInformation(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId
    ) {
        return getDelegate().getPaymentInformation(rentalActivityId);
    }


    /**
     * GET /v2/{rentalActivityId}/payment : Gets payment information
     * # Gets payment information ## Example: &#x60;&#x60;&#x60; GET /v1/digital-checkout/v2/115646542/payment -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @return Returns payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or {\&quot;errorCode\&quot;: \&quot;VEHICLE_NOT_AVAILABLE\&quot;, \&quot;title\&quot;: \&quot;Vehicle not available\&quot;, \&quot;message\&quot;: \&quot;Vehicle you selected is no longer available, please select new vehicle.\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_FAILED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_REJECTED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey&#x3D;WEBAPP&amp;title&#x3D;Payment+error+communication+-+Prepaid (status code 402)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getPaymentInformationV2",
        summary = "Gets payment information",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseV2.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "402", description = "{\"errorCode\": \"VEHICLE_NOT_AVAILABLE\", \"title\": \"Vehicle not available\", \"message\": \"Vehicle you selected is no longer available, please select new vehicle.\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_FAILED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_REJECTED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey=WEBAPP&title=Payment+error+communication+-+Prepaid"),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v2/{rentalActivityId}/payment",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentResponseV2> getPaymentInformationV2(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId
    ) {
        return getDelegate().getPaymentInformationV2(rentalActivityId);
    }


    /**
     * GET /v3/{rentalActivityId}/payment/summary : Gets payment information
     * # Gets payment information ## Example: &#x60;&#x60;&#x60; GET /v1/digital-checkout/v3/115646542/payment -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @return Returns payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or {\&quot;errorCode\&quot;: \&quot;VEHICLE_NOT_AVAILABLE\&quot;, \&quot;title\&quot;: \&quot;Vehicle not available\&quot;, \&quot;message\&quot;: \&quot;Vehicle you selected is no longer available, please select new vehicle.\&quot;, \&quot;retriable\&quot;: false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey&#x3D;WEBAPP&amp;title&#x3D;Payment+error+communication+-+Prepaid (status code 402)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getPaymentInformationV3",
        summary = "Gets payment information",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseV3.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "402", description = "{\"errorCode\": \"VEHICLE_NOT_AVAILABLE\", \"title\": \"Vehicle not available\", \"message\": \"Vehicle you selected is no longer available, please select new vehicle.\", \"retriable\": false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey=WEBAPP&title=Payment+error+communication+-+Prepaid"),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v3/{rentalActivityId}/payment/summary",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentResponseV3> getPaymentInformationV3(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId
    ) {
        return getDelegate().getPaymentInformationV3(rentalActivityId);
    }


    /**
     * POST /{rentalActivityId}/payment/counter : Payment Counter
     * # Payment Counter
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @return Get payment counter information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "paymentCounter",
        summary = "Payment Counter",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get payment counter information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentCounterResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{rentalActivityId}/payment/counter",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentCounterResponse> paymentCounter(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId
    ) {
        return getDelegate().paymentCounter(rentalActivityId);
    }


    /**
     * POST /{rentalActivityId}/payment/authorize : Update payment information
     * # Updates payment information
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param authorizePaymentRequest  (required)
     * @return Get payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or {\&quot;errorCode\&quot;: \&quot;VEHICLE_NOT_AVAILABLE\&quot;, \&quot;title\&quot;: \&quot;Vehicle not available\&quot;, \&quot;message\&quot;: \&quot;Vehicle you selected is no longer available, please select new vehicle.\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_FAILED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_REJECTED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_TYPE_REJECTED\&quot;, \&quot;title\&quot;: \&quot;Payment type not supported\&quot;, \&quot;message\&quot;: \&quot;Payment type not supported\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_ACTION_REQUIRED\&quot;, \&quot;title\&quot;: \&quot;Please update the app\&quot;, \&quot;message\&quot;: \&quot;Please update your App to the latest version to complete the payment authorization process.\&quot;, \&quot;retriable\&quot;: false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey&#x3D;WEBAPP&amp;title&#x3D;Payment+error+communication+-+Prepaid https://confluence.sixt.com/pages/viewpage.action?spaceKey&#x3D;ZEN&amp;title&#x3D;RENT+Old+3DS+Flow+API (status code 402)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "updatePaymentInformation",
        summary = "Update payment information",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizePaymentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "402", description = "{\"errorCode\": \"VEHICLE_NOT_AVAILABLE\", \"title\": \"Vehicle not available\", \"message\": \"Vehicle you selected is no longer available, please select new vehicle.\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_FAILED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_REJECTED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} {\"errorCode\": \"PAYMENT_TYPE_REJECTED\", \"title\": \"Payment type not supported\", \"message\": \"Payment type not supported\", \"retriable\": false} {\"errorCode\": \"PAYMENT_ACTION_REQUIRED\", \"title\": \"Please update the app\", \"message\": \"Please update your App to the latest version to complete the payment authorization process.\", \"retriable\": false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey=WEBAPP&title=Payment+error+communication+-+Prepaid https://confluence.sixt.com/pages/viewpage.action?spaceKey=ZEN&title=RENT+Old+3DS+Flow+API", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            }),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{rentalActivityId}/payment/authorize",
        produces = { "application/json" }
    )
    default ResponseEntity<AuthorizePaymentResponse> updatePaymentInformation(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "AuthorizePaymentRequest", description = "", required = true) @Valid @RequestBody AuthorizePaymentRequest authorizePaymentRequest
    ) {
        return getDelegate().updatePaymentInformation(rentalActivityId, authorizePaymentRequest);
    }


    /**
     * POST /{rentalActivityId}/payment/validate : Validate payment information
     * # Validates payment information
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param paymentRequest  (required)
     * @return Get payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "validatePaymentInformation",
        summary = "Validate payment information",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{rentalActivityId}/payment/validate",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentResponse> validatePaymentInformation(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "PaymentRequest", description = "", required = true) @Valid @RequestBody PaymentRequest paymentRequest
    ) {
        return getDelegate().validatePaymentInformation(rentalActivityId, paymentRequest);
    }


    /**
     * POST /v2/{rentalActivityId}/payment/validate : Validate payment information V2
     * # Validates payment information V2
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param paymentRequest  (required)
     * @return Get payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "validatePaymentInformationV2",
        summary = "Validate payment information V2",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseV2.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v2/{rentalActivityId}/payment/validate",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentResponseV2> validatePaymentInformationV2(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "PaymentRequest", description = "", required = true) @Valid @RequestBody PaymentRequest paymentRequest
    ) {
        return getDelegate().validatePaymentInformationV2(rentalActivityId, paymentRequest);
    }


    /**
     * POST /v3/{rentalActivityId}/payment/validate : Validate payment information V2
     * # Validates payment information ## Example: &#x60;&#x60;&#x60; GET /v1/digital-checkout/v3/115646542/payment/validate -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param paymentRequest  (required)
     * @return Returns payment information (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or {\&quot;errorCode\&quot;: \&quot;VEHICLE_NOT_AVAILABLE\&quot;, \&quot;title\&quot;: \&quot;Vehicle not available\&quot;, \&quot;message\&quot;: \&quot;Vehicle you selected is no longer available, please select new vehicle.\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_FAILED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} {\&quot;errorCode\&quot;: \&quot;PAYMENT_AUTH_REJECTED\&quot;, \&quot;title\&quot;: \&quot;Payment failed\&quot;, \&quot;message\&quot;: \&quot;Looks like the payment didn’t go through\&quot;, \&quot;retriable\&quot;: false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey&#x3D;WEBAPP&amp;title&#x3D;Payment+error+communication+-+Prepaid (status code 402)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or in case of unstisfyable request - &#x60;BOOKING_NOT_ELIGIBLE&#x60; - in case of non zen or next not eligible bookings (status code 416)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "validatePaymentInformationV3",
        summary = "Validate payment information V2",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns payment information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseV3.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "402", description = "{\"errorCode\": \"VEHICLE_NOT_AVAILABLE\", \"title\": \"Vehicle not available\", \"message\": \"Vehicle you selected is no longer available, please select new vehicle.\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_FAILED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} {\"errorCode\": \"PAYMENT_AUTH_REJECTED\", \"title\": \"Payment failed\", \"message\": \"Looks like the payment didn’t go through\", \"retriable\": false} HTTP errors can be the list mentioned by payment team listed in https://confluence.sixt.com/pages/viewpage.action?spaceKey=WEBAPP&title=Payment+error+communication+-+Prepaid"),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "416", description = "in case of unstisfyable request - `BOOKING_NOT_ELIGIBLE` - in case of non zen or next not eligible bookings"),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v3/{rentalActivityId}/payment/validate",
        produces = { "application/json" }
    )
    default ResponseEntity<PaymentResponseV3> validatePaymentInformationV3(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "PaymentRequest", description = "", required = true) @Valid @RequestBody PaymentRequest paymentRequest
    ) {
        return getDelegate().validatePaymentInformationV3(rentalActivityId, paymentRequest);
    }

}
