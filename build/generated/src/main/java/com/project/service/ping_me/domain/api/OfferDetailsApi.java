/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.service.ping_me.domain.api;

import com.project.service.ping_me.domain.contract.HttpError;
import com.project.service.ping_me.domain.contract.OfferConfiguration;
import com.project.service.ping_me.domain.contract.UpdateOfferConfigurationRequest;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "OfferDetails", description = "the OfferDetails API")
public interface OfferDetailsApi {

    default OfferDetailsApiDelegate getDelegate() {
        return new OfferDetailsApiDelegate() {};
    }

    /**
     * GET /{rentalActivityId}/configureProtectionAddOn : Returns the reservation data including bookable charges and price breakdown.
     * # Gets rental activity data including bookable charges and price breakdown.  ## Example:  &#x60;&#x60;&#x60; GET /v1/digital-checkout/115646542/configureProtectionAddOn \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @return Returns protections, addons and price breakup (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_BOOKING_ID&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_SERVER_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "getBookingDetails",
        summary = "Returns the reservation data including bookable charges and price breakdown.",
        tags = { "OfferDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns protections, addons and price breakup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OfferConfiguration.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `INVALID_BOOKING_ID` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{rentalActivityId}/configureProtectionAddOn",
        produces = { "application/json" }
    )
    default ResponseEntity<OfferConfiguration> getBookingDetails(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId
    ) {
        return getDelegate().getBookingDetails(rentalActivityId);
    }


    /**
     * POST /{rentalActivityId}/configureProtectionAddOn : Endpoint for price recalculation(without persistence)
     * # Endpoint for price recalculation (without persistence)  ## Example:  &#x60;&#x60;&#x60; PUT /v1/digital-checkout/115646542/configureProtectionAddOn -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param updateOfferConfigurationRequest  (required)
     * @return Returns a configuration id as well as a Reservation object (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "previewBookingDetails",
        summary = "Endpoint for price recalculation(without persistence)",
        tags = { "OfferDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a configuration id as well as a Reservation object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OfferConfiguration.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{rentalActivityId}/configureProtectionAddOn",
        produces = { "application/json" }
    )
    default ResponseEntity<OfferConfiguration> previewBookingDetails(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "UpdateOfferConfigurationRequest", description = "", required = true) @Valid @RequestBody UpdateOfferConfigurationRequest updateOfferConfigurationRequest
    ) {
        return getDelegate().previewBookingDetails(rentalActivityId, updateOfferConfigurationRequest);
    }


    /**
     * PUT /{rentalActivityId}/configureProtectionAddOn : Endpoint for final update fo extras.
     * # Endpoint for final update of extras.  ## Example:  &#x60;&#x60;&#x60; PUT /v1/digital-checkout/115646542/configureProtectionAddOn -H \&quot;Authorization: Bearer TOKEN\&quot; &#x60;&#x60;&#x60;
     *
     * @param rentalActivityId Rental Activity Id (required)
     * @param updateOfferConfigurationRequest  (required)
     * @return Returns a configuration id as well as a Reservation object (status code 200)
     *         or HTTP errors may have one of the following error codes: - &#x60;INVALID_REQUEST&#x60; - PersonID is missing from token. (status code 400)
     *         or HTTP errors may have one of the following error codes: - &#x60;RESERVATION_NOT_FOUND&#x60; - The reservation was not found. (status code 404)
     *         or HTTP errors may have one of the following error codes: - &#x60;INITIATED_AT_COUNTER&#x60; - The reservation already initiated at counter. (status code 409)
     *         or HTTP errors may have one of the following error codes: - &#x60;INTERNAL_ERROR&#x60; - If there is some error talking to a dependency (status code 500)
     *         or HTTP errors are represented in the following format (status code 200)
     */
    @Operation(
        operationId = "updateBookingDetails",
        summary = "Endpoint for final update fo extras.",
        tags = { "OfferDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a configuration id as well as a Reservation object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OfferConfiguration.class))
            }),
            @ApiResponse(responseCode = "400", description = "HTTP errors may have one of the following error codes: - `INVALID_REQUEST` - PersonID is missing from token."),
            @ApiResponse(responseCode = "404", description = "HTTP errors may have one of the following error codes: - `RESERVATION_NOT_FOUND` - The reservation was not found."),
            @ApiResponse(responseCode = "409", description = "HTTP errors may have one of the following error codes: - `INITIATED_AT_COUNTER` - The reservation already initiated at counter."),
            @ApiResponse(responseCode = "500", description = "HTTP errors may have one of the following error codes: - `INTERNAL_ERROR` - If there is some error talking to a dependency"),
            @ApiResponse(responseCode = "200", description = "HTTP errors are represented in the following format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HttpError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/{rentalActivityId}/configureProtectionAddOn",
        produces = { "application/json" }
    )
    default ResponseEntity<OfferConfiguration> updateBookingDetails(
        @Parameter(name = "rentalActivityId", description = "Rental Activity Id", required = true, in = ParameterIn.PATH) @PathVariable("rentalActivityId") String rentalActivityId,
        @Parameter(name = "UpdateOfferConfigurationRequest", description = "", required = true) @Valid @RequestBody UpdateOfferConfigurationRequest updateOfferConfigurationRequest
    ) {
        return getDelegate().updateBookingDetails(rentalActivityId, updateOfferConfigurationRequest);
    }

}
