openapi: 3.0.1
info:
  description: Ping Me Messaging RESTful API documentation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Ping Me Messaging System APIs
  version: 1.0.0
servers:
- description: Dev url
  url: "https://api-dev.pingme.com/{basePath}"
  variables:
    basePath:
      default: api/
- description: Stage url
  url: "https://api-stage.pingme.com/{basePath}"
  variables:
    basePath:
      default: api/
tags:
- externalDocs:
    description: Design Link
    url: https://www.figma.com/file/cx6GOkn9XsgLKkPFl5dc4O/ZEN-unified-flow-Release-Candidate
  name: Ping-Me
paths:
  /pingme/login:
    get:
      parameters:
      - description: Username of user.
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: Password for user (Will be encrypted).
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseObject'
          description: Returns login response object
        "400":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `INVALID_REQUEST` - pingmeId is missing from token.
        "404":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `PAGE_NOT_FOUND` - The API was not found.
        "409":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `CONFLICT_ERROR` - The session is already in place for this identifier.
        "500":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
          description: HTTP errors are represented in the following format
      summary: Login Existing User
      tags:
      - Ping-Me-Login
      x-accepts: application/json
      x-tags:
      - tag: Ping-Me-Login
  /pingme/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestObject'
        description: Register user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseObject'
          description: Returns entry response object
        "400":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `INVALID_REQUEST` - pingmeId is missing from token.
        "404":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `PAGE_NOT_FOUND` - The API was not found.
        "409":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `CONFLICT_ERROR` - The session is already in place for this identifier.
        "500":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
          description: HTTP errors are represented in the following format
      summary: Create User in System
      tags:
      - Ping-Me-Login
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Ping-Me-Login
  /pingme/users:
    get:
      description: |-
        ## Gets all users present in the system

        ## Example:

        ```
        GET /v1/ping-me/115646542/users -H "Authorization: Bearer TOKEN"
        ```
      operationId: AllUserDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserResponseObject'
                type: array
          description: Returns entry response object
        "400":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `INVALID_REQUEST` - pingmeId is missing from token.
        "404":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `PAGE_NOT_FOUND` - The API was not found.
        "409":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `CONFLICT_ERROR` - The session is already in place for this identifier.
        "500":
          content: {}
          description: |-
            HTTP errors may have one of the following error codes:
            - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
          description: HTTP errors are represented in the following format
      summary: Gets all users present in the system.
      tags:
      - Ping-Me-User-Details
      x-accepts: application/json
      x-tags:
      - tag: Ping-Me-User-Details
components:
  schemas:
    RegisterRequestObject:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
      type: object
    RegisterResponseObject:
      example:
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
      type: object
    UserResponseObject:
      example:
        name: name
        online: true
        id: id
      properties:
        name:
          type: string
        id:
          type: string
        online:
          type: boolean
      type: object
    HttpError:
      properties:
        data:
          description: interface for adding additional information with arbitary format
          properties: {}
          type: object
        errorCode:
          description: the unique error code  (e.g. 'user_not_found')
          type: string
        message:
          description: Human readable error message (e.g. 'The requested user could
            not be found')
          type: string
        retriable:
          description: indicates if the client might perform a retry for the request
            causing the error
          type: boolean
        title:
          description: human readable error title (e.g. 'Not Found')
          type: string
      type: object
