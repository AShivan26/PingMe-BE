openapi: 3.0.1
info:
  title: Ping Me Messaging System APIs
  description: Ping Me Messaging RESTful API documentation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Dev url
    url: https://api-dev.pingme.com/{basePath}
    variables:
      basePath:
        default: api/
  - description: Stage url
    url: https://api-stage.pingme.com/{basePath}
    variables:
      basePath:
        default: api/
tags:
  - name: Ping-Me
    externalDocs:
      description: Design Link
      url: https://www.figma.com/file/cx6GOkn9XsgLKkPFl5dc4O/ZEN-unified-flow-Release-Candidate
paths:
  /pingme/login:
    get:
      tags:
        - Ping-Me-Login
      summary: Login Existing User
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: Username of user.
        - in: query
          name: password
          schema:
            type: string
          required: true
          description: Password for user (Will be encrypted).

      responses:
        200:
          description: Returns login response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseObject'
        400:
          description: |-
            HTTP errors may have one of the following error codes:
            - `INVALID_REQUEST` - pingmeId is missing from token.
          content: { }
        404:
          description: |-
            HTTP errors may have one of the following error codes:
            - `PAGE_NOT_FOUND` - The API was not found.
          content: { }
        409:
          description: |-
            HTTP errors may have one of the following error codes:
            - `CONFLICT_ERROR` - The session is already in place for this identifier.
          content: { }
        500:
          description: |-
            HTTP errors may have one of the following error codes:
            - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency
          content: { }
        default:
          description: HTTP errors are represented in the following format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'

  /pingme/register:
    post:
      tags:
        - Ping-Me-Login
      summary: Create User in System
      requestBody:
        description: Register user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestObject'
      responses:
        200:
          description: Returns entry response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseObject'
        400:
          description: |-
            HTTP errors may have one of the following error codes:
            - `INVALID_REQUEST` - pingmeId is missing from token.
          content: { }
        404:
          description: |-
            HTTP errors may have one of the following error codes:
            - `PAGE_NOT_FOUND` - The API was not found.
          content: { }
        409:
          description: |-
            HTTP errors may have one of the following error codes:
            - `CONFLICT_ERROR` - The session is already in place for this identifier.
          content: { }
        500:
          description: |-
            HTTP errors may have one of the following error codes:
            - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency
          content: { }
        default:
          description: HTTP errors are represented in the following format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'

  /pingme/users:
    get:
      tags:
        - Ping-Me-User-Details
      summary: Gets all users present in the system.
      description: |-
        ## Gets all users present in the system

        ## Example:

        ```
        GET /v1/ping-me/115646542/users -H "Authorization: Bearer TOKEN"
        ```
      operationId: AllUserDetails
      responses:
        200:
          description: Returns entry response object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseObject'
        400:
          description: |-
            HTTP errors may have one of the following error codes:
            - `INVALID_REQUEST` - pingmeId is missing from token.
          content: { }
        404:
          description: |-
            HTTP errors may have one of the following error codes:
            - `PAGE_NOT_FOUND` - The API was not found.
          content: { }
        409:
          description: |-
            HTTP errors may have one of the following error codes:
            - `CONFLICT_ERROR` - The session is already in place for this identifier.
          content: { }
        500:
          description: |-
            HTTP errors may have one of the following error codes:
            - `INTERNAL_SERVER_ERROR` - If there is some error talking to a dependency
          content: { }
        default:
          description: HTTP errors are represented in the following format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'

components:
  schemas:
    RegisterRequestObject:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    RegisterResponseObject:
      type: object
      properties:
        userId:
          type: string
          format: uuid

    UserResponseObject:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        online:
          type: boolean

    HttpError:
      type: object
      properties:
        data:
          type: object
          properties: { }
          description: interface for adding additional information with arbitary format
        errorCode:
          type: string
          description: the unique error code  (e.g. 'user_not_found')
        message:
          type: string
          description: Human readable error message (e.g. 'The requested user could
            not be found')
        retriable:
          type: boolean
          description: indicates if the client might perform a retry for the request
            causing the error
        title:
          type: string
          description: human readable error title (e.g. 'Not Found')

